name: enos-cleanup
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '05 02 * * *'
  # For testing
  push:
    branches:
      - jb/QTI-400

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      regions: ${{steps.get_regions.outputs.regions}}
      acctnum: ${{steps.get_acct.outputs.acctnum}}
    env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID_CI }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY_CI }}
    steps:
      - id: get_regions
        run: echo "regions=$(aws ec2 describe-regions --region us-east-1 --output json --query 'Regions[].RegionName' | tr -d '\n ')" >> $GITHUB_OUTPUT
      - id: get_acct
        run: echo "acctnum=$(aws sts get-caller-identity --output text --query 'Account')" >> $GITHUB_OUTPUT
  aws-nuke:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: rebuy/aws-nuke
      options:
         --user root
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID_CI }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY_CI }}
        TIME_LIMIT: "72h"
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          cp -rp /__w/vault/vault/enos/ci/aws-nuke.yml .
          sed -i "s/000000000000/${{ needs.setup.outputs.acctnum }}/g" aws-nuke.yml
          sed -i "s/TIME_LIMIT/${TIME_LIMIT}/g" aws-nuke.yml
      # We don't care if cleanup succeeds or fails, because dependencies be dependenceies,
      # we'll fail on actually actionable things in the quota steep afterwards.
      - name: Clean up abandoned resources
        run: |
          # this without --no-dry-run will just print what would change (for testing)
          aws-nuke -c aws-nuke.yml -q --force || true
  check-quotas:
    needs: [ setup, aws-nuke ]
    runs-on: ubuntu-latest
    container:
      image: jantman/awslimitchecker
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID_CI }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY_CI }}
    strategy:
      matrix:
        region: ${{ fromJSON(needs.setup.outputs.regions) }}
    steps:
      # Currently just checking VPC limits across all region, can add more checks here in future
      - name: Check AWS Quotas
        run: awslimitchecker -S "VPC" -r ${{matrix.region}}
